Mini ATM System - Submission
============================

GitHub Repo:
------------
https://github.com/lirazaha/Mini-ATM-System

Hosted URL:
-----------
https://mini-atm-system.onrender.com/docs
(Interactive Swagger docs available here)

API Endpoints:
--------------
1. Get Balance:
   GET /accounts/{account_number}/balance
2. Deposit:
   POST /accounts/{account_number}/deposit
   Body: { "amount": "25.00" }
3. Withdraw:
   POST /accounts/{account_number}/withdraw
   Body: { "amount": "10.00" }
4. Health check:
   GET /healthz
5. Transactions (extra feature):
   GET /accounts/{account_number}/transactions


Run Locally:
------------
1. Clone the repo: git clone https://github.com/lirazaha/Mini-ATM-System
2. Install dependencies: pip install -r requirements.txt
3. Start server: uvicorn app.main:app --reload
4. Open docs: http://127.0.0.1:8000/docs


How to Execute API Calls:
-------------------------
Examples using curl:

1) Get balance
   curl https://mini-atm-system.onrender.com/accounts/1001/balance

2) Deposit 25.00
   curl -X POST https://mini-atm-system.onrender.com/accounts/1001/deposit \     -H "Content-Type: application/json" -d '{"amount":"25.00"}'

3) Withdraw 10.00
   curl -X POST https://mini-atm-system.onrender.com/accounts/1001/withdraw \     -H "Content-Type: application/json" -d '{"amount":"10.00"}'

4) View transactions
   curl https://mini-atm-system.onrender.com/accounts/1001/transactions

5) Health check
   curl https://mini-atm-system.onrender.com/healthz

Notes:
------
- Data is stored in-memory; balances reset when the server restarts.
- Amount must be > 0; invalid or overdraft attempts return HTTP 400 with { "error": "..." }.
- Seed accounts:
  * 1001 -> 500.00
  * 1002 -> 1250.75
  * 9999 -> 0.00

Approach & Design Decisions:
----------------------------
- Framework: FastAPI for speed, validation, and auto docs.
- Data model: In-memory dictionary of accounts; Decimal used for accurate money handling.
- Concurrency: Per-account locks prevent race conditions during deposits/withdrawals.
- Validation: Pydantic enforces positive amounts; overdrafts explicitly checked.
- Idempotency: Optional Idempotency-Key header ensures retries do not double charge.
- Error handling: All errors use a consistent schema { "error": "..." }.
- Audit Trail: Every deposit/withdraw recorded and available via /transactions endpoint.
- Health endpoint: /healthz for monitoring status.

Challenges and Solutions:
-------------------------
1. How to use Decimal: All balances and amounts use Pythonâ€™s Decimal type, not floats, to avoid rounding errors in money.
2. Validation: Pydantic models ensure deposits/withdrawals are strictly positive. Withdrawals also check for sufficient funds.
3. Concurrency Safety: Instead of one global lock, I used per-account locks so multiple accounts can be updated safely in parallel.
4. Idempotency: Added optional support for an Idempotency-Key header to prevent double deposits/withdrawals if a client retries the same request.
5. Audit Trail: Every deposit/withdrawal is logged in-memory. The new endpoint GET /accounts/{account}/transactions shows the full history.
6. Health Endpoint: /healthz was added so operators can easily check service status.
7. Consistent Error Schema: All errors return { "error": "message" } for easier client handling.

Submission Requirements Check:
------------------------------
README with approach, design decisions, challenges (README.md)
GitHub repo with code & docs (https://github.com/lirazaha/Mini-ATM-System)
Hosted on Render with live URL (https://mini-atm-system.onrender.com/docs)
Instructions to run & test API (SUBMISSION.txt)
This text file with all required info and links (SUBMISSION.txt)
